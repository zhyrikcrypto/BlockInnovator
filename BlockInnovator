import hashlib
import time

class Block:
    def __init__(self, index, previous_hash, timestamp, data, nonce=0):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = timestamp
        self.data = data
        self.nonce = nonce
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        block_string = f"{self.index}{self.previous_hash}{self.timestamp}{self.data}{self.nonce}"
        return hashlib.sha256(block_string.encode()).hexdigest()

    def __str__(self):
        return (f"Block(Index: {self.index}, Previous Hash: {self.previous_hash}, "
                f"Timestamp: {self.timestamp}, Data: {self.data}, "
                f"Nonce: {self.nonce}, Hash: {self.hash})")

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]

    def create_genesis_block(self):
        return Block(0, "0", time.time(), "Genesis Block")

    def get_latest_block(self):
        return self.chain[-1]

    def add_block(self, new_block):
        new_block.previous_hash = self.get_latest_block().hash
        new_block.hash = new_block.calculate_hash()
        self.chain.append(new_block)

    def proof_of_work(self, block, difficulty):
        while block.hash[:difficulty] != '0' * difficulty:
            block.nonce += 1
            block.hash = block.calculate_hash()
        return block

    def is_chain_valid(self):
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]

            if current_block.hash != current_block.calculate_hash():
                return False

            if current_block.previous_hash != previous_block.hash:
                return False

        return True

# Example Usage
blockchain = Blockchain()
difficulty = 4

# Adding blocks to the blockchain
blockchain.add_block(blockchain.proof_of_work(Block(1, "", time.time(), "Block 1 Data"), difficulty))
blockchain.add_block(blockchain.proof_of_work(Block(2, "", time.time(), "Block 2 Data"), difficulty))

# Printing the blockchain
for block in blockchain.chain:
    print(block)

# Checking if the blockchain is valid
print("Is blockchain valid?", blockchain.is_chain_valid())
